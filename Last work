#include <iostream>
#include <string>
using namespace std;

// Generic binary search function using templates
template <typename T>
int binarySearch(const T array[], int size, T key) {
    int low = 0;
    int high = size - 1;

    while (high >= low) {
        int mid = (low + high) / 2;

        if (key < array[mid])
            high = mid - 1;
        else if (key == array[mid])
            return mid;
        else
            low = mid + 1;
    }

    return -1; // key not found
}

int main() {
    // Test with int
    int intArr[] = {1, 3, 5, 7, 9, 11};
    int intKey = 7;
    cout << "int: Index of " << intKey << " = " 
         << binarySearch(intArr, 6, intKey) << endl;

    // Test with double
    double doubleArr[] = {1.1, 2.2, 3.3, 4.4, 5.5};
    double doubleKey = 3.3;
    cout << "double: Index of " << doubleKey << " = " 
         << binarySearch(doubleArr, 5, doubleKey) << endl;

    // Test with string
    string stringArr[] = {"apple", "banana", "cherry", "date", "fig"};
    string stringKey = "cherry";
    cout << "string: Index of \"" << stringKey << "\" = " 
         << binarySearch(stringArr, 5, stringKey) << endl;

    return 0;
}
